{"componentChunkName":"component---src-templates-blog-post-js","path":"/fsm-all-stages/testing-with-fsm/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Six of one","author":"Ben Lowry"}},"markdownRemark":{"id":"4486ea27-798a-51b8-a463-3923a9ce4c7d","excerpt":"What is a finite state machine A finite state machine (or FSM) is a way to\nmodel a system with a finite number of states and transitions between those states‚Ä¶","html":"<h1>What is a finite state machine</h1>\n<p>A finite state machine (or FSM) is a way to\nmodel a system with a finite number of states and transitions between those states.\nThey come with several benefits including: preventing invalid states by ignoring invalid events.</p>\n<p>FSMs can be represented in different ways, but the one most people are probably familiar with is as a diagram with boxes for the states, and directional arrows for the transitions between them.</p>\n<p>We‚Äôll use a simple example of a light switch to demonstrate a few ways of representing FSMs below:</p>\n<p><img src=\"https://mermaid.ink/svg/eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICAgWypdIC0tPiBPZmZcbiAgICBPZmYgLS0-IE9uIDogVHVybiBvblxuICAgIE9uIC0tPiBPZmYgOiBUdXJuIG9mZiIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjp0cnVlfQ\" alt=\"A finite state machine diagram showing &#x27;on&#x27; and &#x27;off&#x27; states with &#x27;turn on&#x27; and &#x27;turn off&#x27; actions\"></p>\n<p>A table with states and actions on either axis, and resulting state in the cell.</p>\n<table>\n<thead>\n<tr>\n<th>State üëá / Action üëâ</th>\n<th>Turn on</th>\n<th>Turn off</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On</td>\n<td>-</td>\n<td>Off</td>\n</tr>\n<tr>\n<td>Off</td>\n<td>On</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>You can make charts in markdown with <a href=\"https://mermaid-js.github.io/mermaid/#/stateDiagram\">mermaid</a> (<a href=\"https://mermaid-js.github.io/mermaid-live-editor/beta/edit#eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICAgWypdIC0tPiBPZmZcbiAgICBPZmYgLS0-IE9uIDogVHVybiBvblxuICAgIE9uIC0tPiBPZmYgOiBUdXJuIG9mZiIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkZWZhdWx0XCJcbn0iLCJ1cGRhdGVFZGl0b3IiOmZhbHNlLCJhdXRvU3luYyI6dHJ1ZSwidXBkYXRlRGlhZ3JhbSI6ZmFsc2V9\">open in the live editor</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre class=\"language-mermaid\"><code class=\"language-mermaid\">stateDiagram-v2\n    [*] --&gt; Off\n    Off --&gt; On : Turn on\n    On --&gt; Off : Turn off</code></pre></div>\n<p>Or use a DSL like <a href=\"https://lucylang.org/\">Lucy</a>, which compiles to <a href=\"https://xstate.js.org/docs/\">XState</a></p>\n<div class=\"gatsby-highlight\" data-language=\"lucy\"><pre class=\"language-lucy\"><code class=\"language-lucy\">state on {\n  turn_off =&gt; off\n}\n\ninitial state off {\n  turn_on =&gt; on\n}</code></pre></div>\n<p>Or <a href=\"https://www.w3.org/TR/scxml/\">SCXML</a>, an open standard for Statecharts (similar to FSMs, but with more functionality)</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scxml</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/07/scxml<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\">initial</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>state</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">event</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>turn_on<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>on<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>state</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>state</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>on<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">event</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>turn_off<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>state</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scxml</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1>In the design stage</h1>\n<p>FSMs help you model system behaviours as the user will use them.\nThey‚Äôre a great match for user interfaces.\nEach ‚Äúscreen‚Äù represents a finite state (because there are a finite number of them),\nand each button press or link is an event or transition.</p>\n<p>UX designers have been using FSMs for years, though they may not call them that.\nMapping out user flows with a view of the screen and then an arrow to the new state (or states) based on a user action is pretty much the same as the boxes and lines suggested above.</p>\n<p>These visual representations make it easier to communicate with wide groups\n‚Äî a diagram is more accessible than code ‚Äî\nand means that more people can give feedback or point out errors in our design.</p>\n<h1>In the build stage</h1>\n<p>While the examples above mostly refer to user interfaces,\nthey can also be used to model data flows in your domain.\nFor example, the image below shows potential business process for an ‚Äòorder‚Äô.\nSome invalid states are prevented by this design\n‚Äî an order cannot be cancelled once it has shipped,\nnor can it be refunded before it has been paid.</p>\n<p><img src=\"https://mermaid.ink/svg/eyJjb2RlIjoic3RhdGVEaWFncmFtLXYyXG4gICAgWypdIC0tPiBQZW5kaW5nXG4gICAgUGVuZGluZyAtLT4gQ2FuY2VsbGVkIDogQ2FuY2VsXG4gICAgQ2FuY2VsbGVkIC0tPiBbKl1cbiAgICBQZW5kaW5nIC0tPiBXYWl0aW5nX2NvbmZpcm1hdGlvbiA6IFBheVxuICAgIFdhaXRpbmdfY29uZmlybWF0aW9uIC0tPiBSZWFkeV9mb3Jfc2hpcHBpbmcgOiBDb25maXJtZWRcbiAgICBXYWl0aW5nX2NvbmZpcm1hdGlvbiAtLT4gV2FpdGluZ19mb3JfcmVmdW5kIDogUmVmdW5kIHJlcXVlc3RlZFxuICAgIFJlYWR5X2Zvcl9zaGlwcGluZyAtLT4gU2hpcHBlZCA6IFNoaXBcbiAgICBTaGlwcGVkIC0tPiBbKl0gOiBSZWZ1bmQgd2luZG93IGVsYXBzZWRcbiAgICBSZWFkeV9mb3Jfc2hpcHBpbmcgLS0-IFdhaXRpbmdfZm9yX3JlZnVuZCA6IFJlZnVuZCByZXF1ZXN0ZWRcbiAgICBTaGlwcGVkIC0tPiBXYWl0aW5nX2Zvcl9yZXR1cm4gOiBSZWZ1bmQgcmVxdWVzdGVkXG4gICAgV2FpdGluZ19mb3JfcmV0dXJuIC0tPiBXYWl0aW5nX2Zvcl9yZWZ1bmQgOiBSZXR1cm5lZFxuICAgIFdhaXRpbmdfZm9yX3JlZnVuZCAtLT4gUmVmdW5kZWQgOiBSZWZ1bmQgcHJvY2Vzc2VzXG4gICAgUmVmdW5kZWQgLS0-IFsqXSIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0\" alt=\"State machine for an online order\"></p>\n<h1>In the testing stage</h1>\n<p>By looking at a transition in isolation, we have:</p>\n<ul>\n<li>an initial state</li>\n<li>a user action</li>\n<li>a final state</li>\n</ul>\n<p>If you‚Äôre familiar with Behaviour-Driven Design (BDD), that‚Äôs analogous to a Given-When-Then.</p>\n<p>That is a good starting point for a unit test.\nIf you want to move up the\n<a href=\"https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications\" target=\"_blank\" rel=\"noreferrer noopener\">testing trophy</a>,\nyou can make integration or end-to-end tests if you involve more of the machine.</p>\n<p>In the <a href=\"../testing-with-fsm\">next post</a>, I‚Äôll demonstrate how finite state machines can be used to generate test cases</p>","frontmatter":{"title":"Level up your testing with Finite State Machines (part 1)","date":"September 26, 2019","description":"<p> Using Finite State Machines (FSM) to model parts of your software can help you write better tests, and help you raise the bar for quality. </p><p> This blog series will talk to some of the benefits of using finite state machines through all stages of the software development lifecycle. </p>"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/fsm-all-stages/testing-with-fsm/","previous":{"fields":{"slug":"/becoming-telstra-purple/"},"frontmatter":{"title":"Becoming Telstra Purple"}},"next":{"fields":{"slug":"/testing-with-fsm/testing-with-fsm/"},"frontmatter":{"title":"Level up your testing with Finite State Machines (part 1)"}}}}}